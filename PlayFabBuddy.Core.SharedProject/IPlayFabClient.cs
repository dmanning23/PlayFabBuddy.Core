using PlayFab;
using PlayFab.ClientModels;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace PlayFabBuddyLib
{
	public interface IPlayFabClient
	{
		#region Authentication

		/// <summary>
		/// Signs the user in using a custom unique identifier generated by the title, returning a session identifier that can
		/// subsequently be used for API calls which require an authenticated user
		/// </summary>
		Task<PlayFabResult<LoginResult>> LoginWithCustomIDAsync(LoginWithCustomIDRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		/// <summary>
		/// Signs the user into the PlayFab account, returning a session identifier that can subsequently be used for API calls
		/// which require an authenticated user. Unlike most other login API calls, LoginWithEmailAddress does not permit the
		/// creation of new accounts via the CreateAccountFlag. Email addresses may be used to create accounts via
		/// RegisterPlayFabUser.
		/// </summary>
		Task<PlayFabResult<LoginResult>> LoginWithEmailAddressAsync(LoginWithEmailAddressRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		/// <summary>
		/// Signs the user in using the Android device identifier, returning a session identifier that can subsequently be used for
		/// API calls which require an authenticated user
		/// </summary>
		Task<PlayFabResult<LoginResult>> LoginWithAndroidDeviceIDAsync(LoginWithAndroidDeviceIDRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		/// <summary>
		/// Signs the user in using the vendor-specific iOS device identifier, returning a session identifier that can subsequently
		/// be used for API calls which require an authenticated user
		/// </summary>
		Task<PlayFabResult<LoginResult>> LoginWithIOSDeviceIDAsync(LoginWithIOSDeviceIDRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		/// <summary>
		/// Signs the user in using a Facebook access token, returning a session identifier that can subsequently be used for API
		/// calls which require an authenticated user
		/// </summary>
		Task<PlayFabResult<LoginResult>> LoginWithFacebookAsync(LoginWithFacebookRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		/// <summary>
		/// Links the custom identifier, generated by the title, to the user's PlayFab account
		/// </summary>
		Task<PlayFabResult<LinkCustomIDResult>> LinkCustomIDAsync(LinkCustomIDRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		/// <summary>
		/// Adds playfab username/password auth to an existing account created via an anonymous auth method, e.g. automatic device
		/// ID login.
		/// </summary>
		Task<PlayFabResult<AddUsernamePasswordResult>> AddUsernamePasswordAsync(AddUsernamePasswordRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		/// <summary>
		/// Unlinks the related Android device identifier from the user's PlayFab account
		/// </summary>
		Task<PlayFabResult<UnlinkAndroidDeviceIDResult>> UnlinkAndroidDeviceIDAsync(UnlinkAndroidDeviceIDRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		/// <summary>
		/// Unlinks the related custom identifier from the user's PlayFab account
		/// </summary>
		Task<PlayFabResult<UnlinkCustomIDResult>> UnlinkCustomIDAsync(UnlinkCustomIDRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		/// <summary>
		/// Unlinks the related iOS device identifier from the user's PlayFab account
		/// </summary>
		Task<PlayFabResult<UnlinkIOSDeviceIDResult>> UnlinkIOSDeviceIDAsync(UnlinkIOSDeviceIDRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		/// <summary>
		/// Forces an email to be sent to the registered email address for the user's account, with a link allowing the user to
		/// change the password.If an account recovery email template ID is provided, an email using the custom email template will
		/// be used.
		/// </summary>
		Task<PlayFabResult<SendAccountRecoveryEmailResult>> SendAccountRecoveryEmailAsync(SendAccountRecoveryEmailRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		/// <summary>
		/// Retrieves the user's PlayFab account details
		/// </summary>
		Task<PlayFabResult<GetAccountInfoResult>> GetAccountInfoAsync(GetAccountInfoRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		/// <summary>
		/// Updates the title specific display name for the user
		/// </summary>
		Task<PlayFabResult<UpdateUserTitleDisplayNameResult>> UpdateUserTitleDisplayNameAsync(UpdateUserTitleDisplayNameRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		#endregion //Authentication

		#region Player Inventory

		Task<PlayFabResult<GetUserInventoryResult>> GetUserInventoryAsync(GetUserInventoryRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		Task<PlayFabResult<ModifyUserVirtualCurrencyResult>> AddUserVirtualCurrencyAsync(AddUserVirtualCurrencyRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		Task<PlayFabResult<PurchaseItemResult>> PurchaseItemAsync(PurchaseItemRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		Task<PlayFabResult<ConsumeItemResult>> ConsumeItemAsync(ConsumeItemRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		#endregion //Player Inventory

		#region Player Inventory

		Task<PlayFabResult<GetUserDataResult>> GetUserDataAsync(GetUserDataRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		Task<PlayFabResult<GetUserDataResult>> GetUserPublisherDataAsync(GetUserDataRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		Task<PlayFabResult<UpdateUserDataResult>> UpdateUserDataAsync(UpdateUserDataRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		Task<PlayFabResult<UpdateUserDataResult>> UpdateUserPublisherDataAsync(UpdateUserDataRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		#endregion //Player Inventory

		#region Leaderboards

		Task<PlayFabResult<GetPlayerStatisticsResult>> GetPlayerStatisticsAsync(GetPlayerStatisticsRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		Task<PlayFabResult<UpdatePlayerStatisticsResult>> UpdatePlayerStatisticsAsync(UpdatePlayerStatisticsRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		Task<PlayFabResult<GetLeaderboardResult>> GetLeaderboardAsync(GetLeaderboardRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		Task<PlayFabResult<GetLeaderboardResult>> GetFriendLeaderboardAsync(GetFriendLeaderboardRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		Task<PlayFabResult<GetLeaderboardAroundPlayerResult>> GetLeaderboardAroundPlayerAsync(GetLeaderboardAroundPlayerRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		Task<PlayFabResult<GetFriendLeaderboardAroundPlayerResult>> GetFriendLeaderboardAroundPlayerAsync(GetFriendLeaderboardAroundPlayerRequest request, object customData = null, Dictionary<string, string> extraHeaders = null);

		#endregion //Leaderboards
	}
}
